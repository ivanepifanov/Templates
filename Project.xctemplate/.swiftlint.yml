included: # paths to include during linting.
    - ___PACKAGENAME___/Sources
excluded: # paths to ignore during linting. Takes precedence over `included`.
    - Pods
    - Resources/R.generated.swift

# COMMAND LINE RULES: ./swiftlint rules
# RULES URL: https://github.com/realm/SwiftLint/blob/master/Rules.md
# RULES CONFIG URL: https://github.com/realm/SwiftLint/tree/master/Source/SwiftLintFramework/Rules/RuleConfigurations

disabled_rules: # rule identifiers to exclude from running
    # String enum values can be omitted when they are equal to the enumcase name
    - redundant_string_enum_value

    # Operators should be surrounded by a single whitespace when defining them.
    - operator_whitespace
    
    # When registering for a notification using a block, the opaque observer that is returned should be stored so it can be removed later.
    #- discarded_notification_center_observer

opt_in_rules: # some rules are only opt-in

    # nil coalescing operator is only evaluated if the lhs is nil, coalescing operator with nil as rhs is redundant
    - redundant_nil_coalescing

    # Some methods should not call super
    - prohibited_super_call

    # Some overridden methods should always call super
    - overridden_super_call

    # Implicitly unwrapped optionals should be avoided when possible.
    #NOTE: this option is questionable
    - implicitly_unwrapped_optional

    # Force unwrapping should be avoided.
    - force_unwrapping

    # Prefer using .first(where:) over .filter { }.first in collections.
    - first_where

    # Prefer to use extension access modifiers
    - extension_access_modifier

    # Prefer checking isEmpty over comparing count to zero.
    - empty_count

    # Closure expressions should have a single space inside each brace.
    - closure_spacing

    # Closure end should have the same indentation as the line that started it.
    - closure_end_indentation

    # Operators should be surrounded by a single whitespace when they are being used.
    - operator_usage_whitespace

    # Explicitly calling .init() should be avoided.
    - explicit_init

    # Prefer implicit returns in closures.
    # - implicit_return

    # Function parameters should be aligned vertically if they're in multiple lines in a method call.
    - vertical_parameter_alignment_on_call

    # Functions and methods parameters should be either on the same line, or one per line.
    #- multiline_parameters

    # IBOutlets should be private to avoid leaking UIKit to higher layers.
    - private_outlet
    - private_action

    # Prefer not to use extension access modifiers
    #- no_extension_access_modifier

    # Parentheses are not needed when declaring closure arguments.
    #- unneeded_parentheses_in_closure_argument

    # Closure parameters should be on the same line as opening brace.
    #- closure_parameter_position

    # A fatalError call should have a message.
    #- fatal_error_message

    - let_var_whitespace
    - discouraged_direct_init
    - joined_default_parameter
    - contains_over_first_not_nil
    - array_init
    - literal_expression_end_indentation
    - single_test_class
    - sorted_first_last
    - discouraged_optional_boolean

# configurations
trailing_whitespace:
    ignores_empty_lines: true
    ignores_comments: true
    ignores_urls: true

# Types should be nested at most 1 level deep, and statements should be nested at most 5 levels deep.
nesting:
    type_level: 2
  
private_outlet:
    allow_private_set: true

line_length:
    warning: 200
    error: 250
    ignores_function_declarations: true
    ignores_urls: true
    ignores_comments: true

identifier_name:
    min_length: 1

type_name:
    max_length: 50

file_length:
    warning: 400
    error: 600
    ignore_comment_only_lines: true

function_body_length:
    warning: 50
